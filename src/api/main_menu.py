from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from src.config import *
from src.markups.main_menu import main_menu_markup
from src.repositories.users import UsersRepository
from src.schemas.users import UserSchema

router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user = UserSchema(telegram_id=str(message.from_user.id))
    user_exists = await UsersRepository.is_user_exists(user)
    if not user_exists:
        await UsersRepository.add_user(user)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, –∞ —Ç–∞–∫–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_menu_markup
    )


@router.message((F.text == config.markups.main_menu.help) | (F.text == '/help'))
async def cmd_help(message: types.Message):
    help_text = (
        "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
        "üîπ **–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥/–¥–æ—Ö–æ–¥** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n"
        "üîπ **–ë–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** ‚Äî –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü: –î–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã –∏ –≤–∞—à —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.\n\n"
        "üîπ **–¶–µ–ª–∏** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å (–ª–∏–º–∏—Ç) –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü\n\n"
        "üîπ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    )
    await message.answer(help_text, parse_mode="Markdown")


@router.message(F.text == config.markups.back)
async def go_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚Ü™ –í—ã—Ö–æ–¥ –Ω–∞–∑–∞–¥", reply_markup=main_menu_markup)