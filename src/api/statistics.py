from aiogram import Router, F, types

from src.config import *
from src.markups.statistics import stats_markup
from src.repositories.statistics import StatsRepository
from src.schemas.users import UserSchema

router = Router()


@router.message(F.text == config.markups.main_menu.statistics)
async def show_balance_and_stats(message: types.Message):
    # TODO: –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    user = UserSchema(telegram_id=str(message.from_user.id))
    balance = await StatsRepository.get_balance(user)
    monthly_balance = await StatsRepository.get_balance_by_month(user)
    await message.answer(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{balance:.2f}**\n\n"
        f"–ë–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü: **{monthly_balance:.2f}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
        reply_markup=stats_markup,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == config.callbacks.monthly_analytics)
async def show_monthly_analytics(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    #analytics = await database.get_monthly_analytics(callback.from_user.id)
    # biggest = analytics.get('biggest')
    # frequent = analytics.get('frequent')
    #
    # # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    # response_text = "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü**\n\n"
    # if biggest:
    #     response_text += f"üîπ **–°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞**: {biggest[1]:.2f} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{biggest[0]}'.\n"
    # else:
    #     response_text += "üîπ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ.\n"
    #
    # if frequent:
    #     response_text += f"üîπ **–°–∞–º–∞—è —á–∞—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞—Ç**: '{frequent[0]}' ({frequent[1]} —Ä–∞–∑).\n"
    # else:
    #     response_text += "üîπ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.\n"
    #
    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # await callback.message.answer(response_text, parse_mode="Markdown")
    # # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–Ω–∞—á–æ–∫ "–∑–∞–≥—Ä—É–∑–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
    # await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", parse_mode="Markdown")
    await callback.answer()
