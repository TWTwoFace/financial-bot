from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from datetime import datetime

from src.config import config
from src.markups.goals import goals_markup
from src.markups.main_menu import main_menu_markup
from src.repositories.goals import GoalsRepository
from src.repositories.transactions import TransactionsRepository
from src.repositories.users import UsersRepository
from src.schemas.goals import GoalSchema, AddGoalSchema
from src.states.goals import SetGoal

router = Router()


@router.message(F.text == config.markups.main_menu.goals)
async def process_goals(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –≤ –º–µ–Ω—é", reply_markup=goals_markup)


@router.message(F.text == config.markups.goals.get_goal)
async def get_goal(message: Message):
    user = await UsersRepository.get_user_by_telegram(str(message.from_user.id))
    goal: GoalSchema = await GoalsRepository.get_user_goal(user)

    if goal is None:
        await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å")
        return

    date = datetime.today().replace(day=1).replace(hour=0).replace(minute=0).replace(second=0)
    expenses_sum = await TransactionsRepository.get_user_expenses_sum(user, str(date))

    filler_text = '\t'

    for i in range(10):
        if goal.max_value / 10 * (i + 1) <= expenses_sum:
            filler_text += 'üü©'
        else:
            filler_text += '‚¨ú'

    over_part = expenses_sum - goal.max_value

    while over_part > 0:
        filler_text += 'üü•'
        over_part -= goal.max_value / 10

    if len(filler_text) > 16:
        filler_text = filler_text[:16] + '‚ñ∂'

    filler_text = '–î–∏–∞–≥—Ä–∞–º–º–∞: \n' + filler_text

    about_text = f'–¢—Ä–∞—Ç—ã / –¶–µ–ª—å: {expenses_sum} / {goal.max_value}\n\n'

    if expenses_sum > goal.max_value:
        text = f"<b>–¶–µ–ª—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ {expenses_sum - goal.max_value}—Ä. –±–æ–ª—å—à–µ\n\n"
    else:
        text = f"<b>–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n–õ–∏–º–∏—Ç –ø–æ —Ç—Ä–∞—Ç–∞–º –Ω–∞ –º–µ—Å—è—Ü –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω\n\n"

    await message.answer(text=text+about_text+filler_text, reply_markup=main_menu_markup, parse_mode='HTML')


@router.message(F.text == config.markups.goals.set_goal)
async def set_goal(message: Message, state: FSMContext):
    await state.set_state(SetGoal.max_value)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü")


@router.message(SetGoal.max_value)
async def process_max_value(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 5.000:
            raise ValueError

        user = await UsersRepository.get_user_by_telegram(str(message.from_user.id))

        user_goal = await GoalsRepository.get_user_goal(user)

        add_goal = AddGoalSchema(user_id=user.id, max_value=amount)

        if user_goal is None:
            print('1')
            res = await GoalsRepository.add_goal(add_goal)
        else:
            user_goal.max_value = amount
            res = await GoalsRepository.change_goal(user_goal)

        await state.clear()

        if res:
            await message.answer("–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu_markup)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏", reply_markup=main_menu_markup)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 5.000 –∏ –≤—ã—à–µ")